package ev3ObjectRecognition;

import lejos.hardware.*;
import java.util.Arrays;
import lejos.hardware.ev3.LocalEV3;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.hardware.port.Port;
import lejos.hardware.sensor.*;
import lejos.robotics.SampleProvider;

public class Scan extends Thread{
	
	private static EV3ColorSensor lightSensor;
	private static EV3UltrasonicSensor usSensor;
	private Odometer odo;
	private Navigation nav;
	private ObjectRecognition OR;
	private EV3LargeRegulatedMotor rightMotor;
	private EV3LargeRegulatedMotor leftMotor;
	private EV3LargeRegulatedMotor usMotor;
	private static final int FORWARD_SPEED = 150;
	private static final int ROTATE_SPEED = 150;
	private static final double RIGHT_RADIUS = 2.1;
	private static final double LEFT_RADIUS = 2.1;
	private static final double WIDTH = 15.6;
	private static final double CM_ERR = 1.5;
	private int distance, medianDistance; // distance from a block
	int[] distanceArray = new int[5]; // distance readings
	int[] sortedArray = new int[5]; // distance readings in ascending order
	boolean isFinished;
	
	public Scan (EV3UltrasonicSensor usSensor, EV3ColorSensor lightSensor, Odometer odo, Navigation nav, EV3LargeRegulatedMotor leftMotor, EV3LargeRegulatedMotor rightMotor, EV3LargeRegulatedMotor usMotor){
		this.usSensor = usSensor;
		this.lightSensor = lightSensor;
		this.odo = odo;
		this.nav = nav;
		this.leftMotor = leftMotor;
		this.rightMotor = rightMotor;
		this.usMotor = usMotor;
	}
	
	public void startRun(){
		boolean isFinished = false;		
		turn(90);
		leftMotor.setSpeed(FORWARD_SPEED);
		rightMotor.setSpeed(FORWARD_SPEED);
		leftMotor.forward();
		rightMotor.forward();
		
		usMotor.setSpeed(80); // rotate sensor fast to be useful while moving
		turnSensor(90); // rotate sensor counterclockwise
		
		// assuming we're near our starting position, travel to 0,60
				if (Math.abs(odo.getX() - 0) < CM_ERR
						&& Math.abs(odo.getY() - 60) > CM_ERR) {
					travelTo(60, 0);

					if (isNotThereYet(60, 0)) {
						isFinished = true;
						return;
					}

					turn(90); // turn CCW
				}

		
	}
	
	public void travelTo(double x, double y) {
		boolean isObject = false;

		long timeStart, timeEnd;

		Arrays.fill(distanceArray, 255); // initializes the distanceArray

		while (isNotThereYet(x, y)) {
			timeStart = System.currentTimeMillis();

			leftMotor.setSpeed(FORWARD_SPEED);
			rightMotor.setSpeed(FORWARD_SPEED);
			leftMotor.forward();
			rightMotor.forward();

			setMedian();

			// in the case that the median distance returned by the us is less
			// than 30, set isObject true
			if (medianDistance < 30) {
				isObject = true;
				break;
			}

			timeEnd = System.currentTimeMillis();
			if (timeEnd - timeStart < TIME_PERIOD) {
				try {
					Thread.sleep(TIME_PERIOD - (timeEnd - timeStart));
				} catch (InterruptedException e) {
					// there is nothing to be done here because it is not
					// expected that the detector will be
					// interrupted by another thread
				}
			}

		}

		//once an object is found
		if (isObject) {
			usMotor.setSpeed(25);
			turnSensor(90);
			turn(-90);
		}

	}
	
	
	
	

	// determines if robot is near target
		public boolean isNotThereYet(double x, double y) {
			return Math.abs(x - odo.getX()) > CM_ERR
					|| Math.abs(y - odo.getY()) > CM_ERR;
		}

		// turns the robot by a specified angle
		public void turnSensor(int degrees) {
			usMotor.rotate(degrees);
		}

		// turns the robot by a specified angle
		public void turn(double angle) {
			leftMotor.setSpeed(ROTATE_SPEED);
			rightMotor.setSpeed(ROTATE_SPEED);

			leftMotor.rotate(convertAngle(LEFT_RADIUS, WIDTH, angle), true);
			rightMotor.rotate(-convertAngle(RIGHT_RADIUS, WIDTH, angle), false);
		}

		// helper method to convert the distance each wheel must travel
		private static int convertDistance(double radius, double distance) {
			return (int) ((180.0 * distance) / (Math.PI * radius));
		}

		// helper method to convert the angle each motor must rotate
		private static int convertAngle(double radius, double width, double angle) {
			return convertDistance(radius, Math.PI * width * angle / 360.0);
		}
		
		// calculates the median of a sorted array
		private int median(int[] m) {
			int middle = m.length / 2;
			if (m.length % 2 == 1) {
				return m[middle];
			} else {
				return (m[middle - 1] + m[middle]) / 2;
			}
		}
		
		private void setMedian() {
			distance = usSensor.getDistanceMode();

			// shift each value to the left
			for (int i = 0; i < distanceArray.length - 1; i++) {
				distanceArray[i] = distanceArray[i + 1];
			}

			distanceArray[distanceArray.length - 1] = distance;

			System.arraycopy(distanceArray, 0, sortedArray, 0, distanceArray.length);
			Arrays.sort(sortedArray);

			medianDistance = median(sortedArray);
		}

		public int getMedian() {
			return medianDistance;
		}
		
		private float getFilteredData() {
			usSensor.fetchSample(usData, 0);
			float distance = usData[0]*100;
					
			return distance;
		}

		public boolean getIsDone() {
			return isFinished;
		}
	
	
}
