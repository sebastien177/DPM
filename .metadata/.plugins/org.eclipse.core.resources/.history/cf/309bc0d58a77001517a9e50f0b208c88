package ev3ObjectRecognition;

import lejos.hardware.*;
import java.util.Arrays;
import lejos.hardware.ev3.LocalEV3;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.hardware.port.Port;
import lejos.hardware.sensor.*;
import lejos.robotics.SampleProvider;
import lejos.utility.Delay;


public class BlockRecognition extends Thread {
	public final Object lock = new Object(); // for blocking method
	private static final int TIME_PERIOD = 20;
	private static final int FORWARD_SPEED = 100;
	private static final int ROTATE_SPEED = 100;
	private static final int STOP_DISTANCE = 4; // how far from block to stop
	private static final double RIGHT_RADIUS = 2.1;
	private static final double LEFT_RADIUS = 2.1;
	private static final double WIDTH = 15.6;
	private static final double CM_ERR = 1.5; // allowed error in position
	private Odometer odo;
	private boolean isStyro = false; // initialize to false
	private boolean isCinder = false;
	private boolean isFinished;
	private SampleProvider usSensor;
	private SampleProvider colorSensor;
	private float[] colorData;
	private float[] usData;
	private int styrofoamColor[] = new int[] {5,9};
	private EV3LargeRegulatedMotor rightMotor;
	private EV3LargeRegulatedMotor leftMotor;
	private EV3LargeRegulatedMotor usMotor;

	private int redValue, blueValue; // color readings

	private int distance, medianDistance;

	int[] distanceArray = new int[5];
	int[] sortedArray = new int[5];
	
	public BlockRecognition(Odometer odo, SampleProvider usSensor, float[] usData, SampleProvider colorSensor, float[] colorData,
			EV3LargeRegulatedMotor rightMotor, EV3LargeRegulatedMotor leftMotor){
		this.odo = odo;
		this.usSensor = usSensor;
		this.usData = usData;
		this.colorSensor = colorSensor;
		this.colorData = colorData;	
		this.rightMotor = rightMotor;
		this.leftMotor = leftMotor;
		}
	
	public void startRun(){
		Navigation nav = new Navigation(odo);
		long timeStart, timeEnd;

		double xInit = odo.getX(); // initial x position
		double yInit = odo.getY(); // initial y position
		
		leftMotor.forward();
		rightMotor.forward();
		
		while (true){
			timeStart = System.currentTimeMillis();



			// stop if close to a block
			if (getFilteredData() <= STOP_DISTANCE) {
				Stop();
				Delay.msDelay(500);
				setBlockType(); // determine block type

				if (isStyro) {
					grabBlock();
				} else {
					break;
				}

			} else {
				//goForward();
				isCinder = false;
				isStyro = false;
			}

			timeEnd = System.currentTimeMillis();
			if (timeEnd - timeStart < TIME_PERIOD) {
				try {
					Thread.sleep(TIME_PERIOD - (timeEnd - timeStart));
				} catch (InterruptedException e) {
					// there is nothing to be done here because it is not
					// expected that the detector will be
					// interrupted by another thread
				}
			}
		}
		/*
		while (isNotThereYet(xInit, yInit)) {
			goBackward();
		}
		*/

		nav.travelBackwardTo(xInit, yInit);
		//Stop();
		isFinished = true;
		return;
	}
	
	// accessors
		public int getBlue() {
			return blueValue;
		}

		public int getRed() {
			return redValue;
		}

		public boolean getIsStyro() {
			return isStyro;
		}

		public boolean getIsCinder() {
			return isCinder;
		}

		// determines the type of a block through the use of color ratios
		public void setBlockType() {
			colorSensor.fetchSample(colorData, 0);
			float lightValue = colorData[0]*100;

			if (lightValue > styrofoamColor[0] && lightValue < styrofoamColor[1] ) {
				isStyro = true;
				isCinder = false;
			} else {
				isCinder = true;
				isStyro = false;
			}
		}

		// travel in a straight line indefinitely
		public void goForward() {
			leftMotor.setSpeed(FORWARD_SPEED);
			rightMotor.setSpeed(FORWARD_SPEED);
			leftMotor.forward();
			rightMotor.forward();
		}

		// travel backwards indefinitely
		public void goBackward() {
			leftMotor.setSpeed(FORWARD_SPEED);
			rightMotor.setSpeed(FORWARD_SPEED);
			leftMotor.backward();
			rightMotor.backward();
		}

		// stops the robot
		public void Stop() {
			leftMotor.stop();
			rightMotor.stop();
		}

		// method adjusts robot's position to capture the styrofoam block
		public void grabBlock() {
			goSetDistance(-10); // get the robot to move backwards so that it can
			// then either move around a wooden block or adjust
			// its position to push a styrofoam block

			turn(-90); // CCW
			goSetDistance(10);
			turn(90); // CW
			goSetDistance(10);

			// goes forward indefinitely as we didn't implement a method of
			// travelling to corner properly
			while (true) {
				goForward();
			}
		}

		// travels a specific distance
		public void goSetDistance(double distance) {
			leftMotor.setSpeed(-FORWARD_SPEED);
			rightMotor.setSpeed(-FORWARD_SPEED);
			rightMotor.rotate(convertDistance(RIGHT_RADIUS, distance), true);
			leftMotor.rotate(convertDistance(LEFT_RADIUS, distance), false);
		}

		// turns the robot
		public void turn(double angle) {
			leftMotor.setSpeed(ROTATE_SPEED);
			rightMotor.setSpeed(ROTATE_SPEED);
			leftMotor.rotate(convertAngle(LEFT_RADIUS, WIDTH, angle), true);
			rightMotor.rotate(-convertAngle(RIGHT_RADIUS, WIDTH, angle), false);
		}

		// helper method to convert the distance each wheel must travel
		private static int convertDistance(double radius, double distance) {
			return (int) ((180.0 * distance) / (Math.PI * radius));
		}

		// helper method to convert the angle each motor must rotate
		private static int convertAngle(double radius, double width, double angle) {
			return convertDistance(radius, Math.PI * width * angle / 360.0);
		}

		// returns a boolean telling whether the robot is at target location
		public boolean isNotThereYet(double x, double y) {
			return Math.abs(x - odo.getX()) > CM_ERR
					|| Math.abs(y - odo.getY()) > CM_ERR;
		}

		public boolean isDoneForNow() {
			return isFinished;
		}
	
	
	private float getFilteredData() {
		usSensor.fetchSample(usData, 0);
		float distance = usData[0]*100;
				
		return distance;
	}

}
