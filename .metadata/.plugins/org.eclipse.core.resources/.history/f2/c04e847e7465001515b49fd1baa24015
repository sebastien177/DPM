package ev3Odometer;

//OdometryCorrection.java

import lejos.ev3.*;
import lejos.hardware.ev3.LocalEV3;
import lejos.hardware.port.Port;
import lejos.hardware.sensor.*;
import lejos.hardware.*;
import lejos.robotics.SampleProvider;
import lejos.hardware.port.Port;
import lejos.hardware.port.SensorPort;
import lejos.hardware.sensor.EV3ColorSensor;



public class OdometryCorrection extends Thread {
	private static final long CORRECTION_PERIOD = 10;
	private static final double SENSOR_DISTANCE = 4.5; // difference between sensor and wheels
	private static final double HALF_SQUARE = 15.24;
	private int sensorCount = 0;
	private Odometer odometer;
	private static EV3ColorSensor lightSensor;
	


	// constructor
	public OdometryCorrection(Odometer odometer, EV3ColorSensor lightSensor) {
		this.odometer = odometer;
		this.lightSensor = lightSensor; 
	}

	// run method (required for Thread)
	public void run() {
		long correctionStart, correctionEnd;	
		float[] sampleRed = {0};
		
		while (true) {
			correctionStart = System.currentTimeMillis();
			lightSensor.getRedMode().fetchSample(sampleRed, 0);
			// put your correction code here
			
			//detection of black lines when the amount of red returned is smaller than 0.3
			 if (sampleRed[0]*100 < 30){
				 Sound.beep(); 
				//keep track of when line is crossed
				 sensorCount++;
				 double robotDistance;
				 switch(sensorCount){
				 case 0: break;
				 //Robot crosses first line
				 
				 case 1: // ROBOT GOES FORWARD Y
				 		// Substracting sensor distance
				 		robotDistance = HALF_SQUARE - SENSOR_DISTANCE;
				 		this.odometer.setY(robotDistance);
				 
				 case 2: // ROBOT GOES FORWARD Y
					 	// Substracting sensor distance
				 		robotDistance = (HALF_SQUARE*3) - SENSOR_DISTANCE;
				 		this.odometer.setY(robotDistance);
				 
				 case 3: // ROBOT TURNS RIGHT X
					 	// Substracting sensor distance
				 		robotDistance = (HALF_SQUARE) - SENSOR_DISTANCE;
				 		this.odometer.setX(robotDistance);	
				 
				 case 4: // ROBOT TURNS RIGHT X
					 	// Substracting sensor distance
				 		robotDistance = (HALF_SQUARE*3) - SENSOR_DISTANCE;
				 		this.odometer.setX(robotDistance);	
				 
				 case 5: //ROBOT RETURNS Y
					 robotDistance = (HALF_SQUARE*3) + SENSOR_DISTANCE;
				 		this.odometer.setY(robotDistance);	
				
				 case 6: //ROBOT RETURNS Y
					 robotDistance = (HALF_SQUARE) + SENSOR_DISTANCE;
				 		this.odometer.setY(robotDistance);	
				
				 case 7: //ROBOT RETURNS X	
					 robotDistance = (HALF_SQUARE*3) + SENSOR_DISTANCE;
				 		this.odometer.setX(robotDistance);
				
				 case 8: //ROBOT RETURNS X	
					 robotDistance = (HALF_SQUARE) + SENSOR_DISTANCE;
				 		this.odometer.setX(robotDistance);	 		
				 }
				
				 try{ 
						Thread.sleep(160);
					}
					catch (InterruptedException e){

					}
				
			
			}

			// this ensure the odometry correction occurs only once every period
			correctionEnd = System.currentTimeMillis();
			if (correctionEnd - correctionStart < CORRECTION_PERIOD) {
				try {
					Thread.sleep(CORRECTION_PERIOD
							- (correctionEnd - correctionStart));
				} catch (InterruptedException e) {
					// there is nothing to be done here because it is not
					// expected that the odometry correction will be
					// interrupted by another thread
				}
			}
		}
	}

}