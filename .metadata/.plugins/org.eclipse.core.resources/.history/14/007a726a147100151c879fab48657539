package ev3Localization;

import lejos.robotics.SampleProvider;

public class USLocalizer {
	public enum LocalizationType { FALLING_EDGE, RISING_EDGE };
	public static double ROTATION_SPEED = 30;

	private Odometer odo;
	private SampleProvider usSensor;
	private float[] usData;
	private LocalizationType locType;
	private TwoWheeledRobot robot;
	
	public USLocalizer(Odometer odo,  SampleProvider usSensor, float[] usData, LocalizationType locType) {
		this.odo = odo;
		this.usSensor = usSensor;
		this.usData = usData;
		this.locType = locType;
	}
	
	public void doLocalization() {
		double [] pos = new double [3];
		double angleA, angleB;
		double threshold = 30;
		
		if (locType == LocalizationType.FALLING_EDGE) {
			// rotate the robot until it sees no wall
			while (getFilteredData() <= threshold) {
				robot.setRotationSpeed(-25);
			}	
			
			// keep rotating until the robot sees a wall, then latch the angle
			while (getFilteredData() + 10 >= threshold) {

				robot.setRotationSpeed(-35);

			}
			angleA = odo.getAng();
			
			// switch direction and wait until it sees no wall
			while (getFilteredData() <= threshold) {

				robot.setRotationSpeed(10);

			}
			
			// keep rotating until the robot sees a wall, then latch the angle
			while (getFilteredData() >= threshold) {

				robot.setRotationSpeed(10);

			}
			angleB = odo.getAng();
			
			//Stop Rotating
			robot.setRotationSpeed(0);
			
			// angleA is clockwise from angleB, so assume the average of the
			// angles to the right of angleB is 45 degrees past 'north'
			double deltaTheta = 0;
			if (angleB > angleA) {
				deltaTheta = 225 - ((angleA + angleB) / 2);
			} else {
				deltaTheta = 45 - ((angleA + angleB) / 2);
			}
			// update the odometer position (example to follow:)
			odo.setPosition(new double[] { 0.0, 0.0, deltaTheta + angleB },
					new boolean[] { true, true, true });
		} else {
			/*
			 * The robot should turn until it sees the wall, then look for the
			 * "rising edges:" the points where it no longer sees the wall.
			 * This is very similar to the FALLING_EDGE routine, but the robot
			 * will face toward the wall for most of it.
			 */
			
			// rotate the robot until it sees a wall
						while (getFilteredData() + 10 >= threshold) {
							robot.setRotationSpeed(-25);
						}	
						
						// keep rotating until the robot sees no wall, then latch the angle
						while (getFilteredData() <= threshold) {

							robot.setRotationSpeed(-35);

						}
						angleA = odo.getAng();
						
						// switch direction and wait until it sees a wall
						while (getFilteredData() + 10 >= threshold) {

							robot.setRotationSpeed(10);

						}
						
						// keep rotating until the robot sees no wall, then latch the angle
						while (getFilteredData() <= threshold) {

							robot.setRotationSpeed(10);

						}
						angleB = odo.getAng();
						
						//Stop Rotating
						robot.setRotationSpeed(0);
						
						// angleA is clockwise from angleB, so assume the average of the
						// angles to the right of angleB is 45 degrees past 'north'
						double deltaTheta = 0;
						if (angleA > angleB) {
							deltaTheta = 225 - ((angleA + angleB) / 2);
						} else {
							deltaTheta = 45 - ((angleA + angleB) / 2);
						}
						// update the odometer position (example to follow:)
						odo.setPosition(new double[] { 0.0, 0.0, deltaTheta + angleB },
								new boolean[] { true, true, true });
			

		}
	}
	
	private float getFilteredData() {
		usSensor.fetchSample(usData, 0);
		float distance = usData[0];
				
		return distance;
	}

}
