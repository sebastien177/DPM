package ev3ObjectRecognition;

import lejos.hardware.*;
import lejos.hardware.ev3.LocalEV3;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.hardware.port.Port;
import lejos.hardware.sensor.*;
import lejos.robotics.SampleProvider;

public class Scan extends Thread{
	
	private static EV3ColorSensor lightSensor;
	private static EV3UltrasonicSensor usSensor;
	private Odometer odo;
	private Navigation nav;
	private ObjectRecognition OR;
	private EV3LargeRegulatedMotor rightMotor;
	private EV3LargeRegulatedMotor leftMotor;
	private EV3LargeRegulatedMotor usMotor;
	private static final int FORWARD_SPEED = 150;
	private static final int ROTATE_SPEED = 150;
	private static final double RIGHT_RADIUS = 2.1;
	private static final double LEFT_RADIUS = 2.1;
	private static final double WIDTH = 15.6;
	
	public Scan (EV3UltrasonicSensor usSensor, EV3ColorSensor lightSensor, Odometer odo, Navigation nav, EV3LargeRegulatedMotor leftMotor, EV3LargeRegulatedMotor rightMotor, EV3LargeRegulatedMotor usMotor){
		this.usSensor = usSensor;
		this.lightSensor = lightSensor;
		this.odo = odo;
		this.nav = nav;
		this.leftMotor = leftMotor;
		this.rightMotor = rightMotor;
		this.usMotor = usMotor;
	}
	
	public void startRun(){
		boolean isFinished = false;
		
		turn(90);
	}

	// determines if robot is near target
		public boolean isNotThereYet(double x, double y) {
			return Math.abs(x - odometer.getX()) > CM_ERR
					|| Math.abs(y - odometer.getY()) > CM_ERR;
		}

		// turns the robot by a specified angle
		public void turnSensor(int degrees) {
			usMotor.rotate(degrees);
		}

		// turns the robot by a specified angle
		public void turn(double angle) {
			leftMotor.setSpeed(ROTATE_SPEED);
			rightMotor.setSpeed(ROTATE_SPEED);

			leftMotor.rotate(convertAngle(LEFT_RADIUS, WIDTH, angle), true);
			rightMotor.rotate(-convertAngle(RIGHT_RADIUS, WIDTH, angle), false);
		}

		// helper method to convert the distance each wheel must travel
		private static int convertDistance(double radius, double distance) {
			return (int) ((180.0 * distance) / (Math.PI * radius));
		}

		// helper method to convert the angle each motor must rotate
		private static int convertAngle(double radius, double width, double angle) {
			return convertDistance(radius, Math.PI * width * angle / 360.0);
		}
	
	
}
