package ev3ObjectRecognition;


import lejos.hardware.*;
import lejos.hardware.ev3.LocalEV3;
import lejos.hardware.lcd.TextLCD;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.hardware.port.Port;
import lejos.hardware.port.SensorPort;
import lejos.hardware.sensor.*;
import lejos.robotics.SampleProvider;


public class Lab5 {
	private static final EV3LargeRegulatedMotor leftMotor = new EV3LargeRegulatedMotor(LocalEV3.get().getPort("A"));
	private static final EV3LargeRegulatedMotor rightMotor = new EV3LargeRegulatedMotor(LocalEV3.get().getPort("B"));
	private static final EV3LargeRegulatedMotor usMotor = new EV3LargeRegulatedMotor(LocalEV3.get().getPort("C"));
	private static final Port usPort = LocalEV3.get().getPort("S1");		
	private static final Port colorPort = LocalEV3.get().getPort("S2");
	public static final double WHEEL_RADIUS = 2.17;
	public static final double TRACK = 15.175;

	public static void main(String[] args) {
		int buttonChoice;

		//Setup ultrasonic sensor
		// 1. Create a port object attached to a physical port (done above)
		// 2. Create a sensor instance and attach to port
		// 3. Create a sample provider instance for the above and initialize operating mode
		// 4. Create a buffer for the sensor data
		@SuppressWarnings("resource")							    	// Because we don't bother to close this resource
		

		//Setup color sensor
		// 1. Create a port object attached to a physical port (done above)
		// 2. Create a sensor instance and attach to port
		// 3. Create a sample provider instance for the above and initialize operating mode
		// 4. Create a buffer for the sensor data

		// setup the odometer and display
		Odometer odo = new Odometer(leftMotor, rightMotor, 30, true);
		final TextLCD t = LocalEV3.get().getTextLCD();

		do {
			// clear the display
			t.clear();

			// ask the user whether to navigate with or without the obstacle
			t.drawString("< Left  |Right >", 0, 0);
			t.drawString("        |       ", 0, 1);
			t.drawString("Detect|Search ", 0, 2);

			buttonChoice = Button.waitForAnyPress();

		} while (buttonChoice != Button.ID_LEFT && buttonChoice != Button.ID_RIGHT 
				&& buttonChoice != Button.ID_UP && buttonChoice != Button.ID_DOWN);


		if (buttonChoice == Button.ID_UP) {
			Scan scan = new Scan(usMotor);
			scan.turnSensor(90);
			buttonChoice = Button.waitForAnyPress();
		}
		
		if (buttonChoice == Button.ID_ESCAPE){
			System.exit(0);
		}

		SensorModes usSensor = new EV3UltrasonicSensor(usPort);
		SampleProvider usValue = usSensor.getMode("Distance");			// colorValue provides samples from this instance
		float[] usData = new float[usValue.sampleSize()];				// colorData is the buffer in which data are returned
		
		SensorModes colorSensor = new EV3ColorSensor(colorPort);
		SampleProvider colorValue = colorSensor.getMode("Ambient");			// colorValue provides samples from this instance
		float[] colorData = new float[colorValue.sampleSize()];			// colorData is the buffer in which data are returned

		// for testing, we added this to avoid localizing each time
		if (buttonChoice == Button.ID_LEFT) {
			ObjectDetection od = new ObjectDetection(colorSensor, colorData, usValue, usData);
			od.run();
		}

		USLocalizer usl = new USLocalizer(odo, usSensor, usData,USLocalizer.LocalizationType.FALLING_EDGE, leftMotor, rightMotor, WHEEL_RADIUS, TRACK );
		Scan scan = new Scan(usValue, usData, colorValue, colorData, odo, leftMotor, rightMotor, usMotor);
		BlockRecognition br = new BlockRecognition(odo,  usSensor,  usData,  colorSensor,colorData);

		new LCDInfo(odo, usSensor, usData, colorSensor, colorData);

		usl.doLocalization();
		// begin the threads
		scan.start();
		br.start();

		while (true) {
			scan.startRun();

			// if a scanning routine needs to perform block detection
			if (scan.getIsDone()) {
				br.startRun();
			}
		}
	}


}
